/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-explicit-any */
import { useEffect, useState } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import axios from 'axios';
import { toast } from 'sonner';
import type { IEvent } from '../types/types';

const EditEventPage = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [event, setEvent] = useState<IEvent>();
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    date: '',
    location: '',
  });

  // –°—Ç–∞–Ω –¥–ª—è –ø–æ–∫–∞–∑—É –º–æ–¥–∞–ª–∫–∏
  const [showDeleteModal, setShowDeleteModal] = useState(false);

  useEffect(() => {
    const fetchEvent = async () => {
      try {
        const response = await axios.get(`/api/events/${id}`);
        setEvent(response.data);
        setFormData({
          title: response.data.title || '',
          description: response.data.description || '',
          date: response.data.date?.slice(0, 16) || '',
          location: response.data.location || '',
        });
      } catch {
        toast.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ–¥—ñ—é');
      } finally {
        setLoading(false);
      }
    };

    fetchEvent();
  }, [id]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    try {
      await axios.put(`/api/events/${id}`, { ...formData });
      toast.success('–ü–æ–¥—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–æ!');
      navigate(`/events/${id}`);
    } catch (err: any) {
      const errors = err?.response?.data?.errors;
      if (Array.isArray(errors)) {
        errors.forEach((error: any) => toast.error(error.msg));
      } else {
        toast.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–æ–¥—ñ—ó');
      }
    }
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª–∫–∏
  const openDeleteModal = () => setShowDeleteModal(true);

  // –í—ñ–¥–º—ñ–Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è (–∑–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª–∫–∏)
  const closeDeleteModal = () => setShowDeleteModal(false);

  // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
  const confirmDelete = async () => {
    try {
      await axios.delete(`/api/events/${id}`);
      toast.success('–ü–æ–¥—ñ—é –≤–∏–¥–∞–ª–µ–Ω–æ!');
      navigate('/');
    } catch (err: any) {
      toast.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø–æ–¥—ñ—ó');
    } finally {
      setShowDeleteModal(false);
    }
  };

  if (loading) return <p className="text-center py-10 text-lg">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</p>;

  return (
    <>
      <Link
        to="/"
        className="inline-block text-gray-700 hover:text-blue-600 hover:underline mt-10"
      >
        ‚Üê –ù–∞ –≥–æ–ª–æ–≤–Ω—É
      </Link>
      <div className="max-w-2xl mx-auto py-12 px-6">
        <h1 className="text-3xl font-bold text-center mb-8">–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–¥—ñ—é</h1>

        <form onSubmit={handleSubmit} className="space-y-6 bg-white p-6 rounded-xl shadow-lg">
          <div>
            <label htmlFor="title" className="block text-sm font-medium text-gray-700 mb-1">
              –ù–∞–∑–≤–∞ –ø–æ–¥—ñ—ó
            </label>
            <input
              id="title"
              name="title"
              type="text"
              value={formData.title}
              onChange={handleChange}
              required
              className="w-full border-gray-300 rounded-md shadow-sm focus:ring-yellow-500 focus:border-yellow-500 px-4 py-2"
            />
          </div>

          <div>
            <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-1">
              –û–ø–∏—Å
            </label>
            <textarea
              id="description"
              name="description"
              value={formData.description}
              onChange={handleChange}
              rows={4}
              className="w-full border-gray-300 rounded-md shadow-sm focus:ring-yellow-500 focus:border-yellow-500 px-4 py-2"
            />
          </div>

          <div>
            <label htmlFor="date" className="block text-sm font-medium text-gray-700 mb-1">
              –î–∞—Ç–∞ —Ç–∞ —á–∞—Å
            </label>
            <input
              id="date"
              name="date"
              type="datetime-local"
              value={formData.date}
              onChange={handleChange}
              required
              className="w-full border-gray-300 rounded-md shadow-sm focus:ring-yellow-500 focus:border-yellow-500 px-4 py-2"
            />
          </div>

          <div>
            <label htmlFor="location" className="block text-sm font-medium text-gray-700 mb-1">
              –ú—ñ—Å—Ü–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è
            </label>
            <input
              id="location"
              name="location"
              type="text"
              value={formData.location}
              onChange={handleChange}
              required
              className="w-full border-gray-300 rounded-md shadow-sm focus:ring-yellow-500 focus:border-yellow-500 px-4 py-2"
            />
          </div>

          <div className="flex justify-between items-center">
            <button
              type="submit"
              className="bg-yellow-500 hover:bg-yellow-600 text-white cursor-pointer font-semibold px-6 py-2 rounded-md transition duration-200"
            >
              üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏
            </button>

            <button
              type="button"
              onClick={openDeleteModal}
              className="bg-red-600 hover:bg-red-700 cursor-pointer text-white font-semibold px-6 py-2 rounded-md transition duration-200"
            >
              üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–¥—ñ—é
            </button>
          </div>
        </form>
      </div>

      {/* –ú–æ–¥–∞–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è */}
      {showDeleteModal && (
        <div
          className="fixed bg-white inset-0 bg-opacity-50 flex items-center justify-center z-50"
          onClick={closeDeleteModal}
        >
          <div
            className="bg-white rounded-lg shadow-lg p-6 max-w-sm w-full"
            onClick={e => e.stopPropagation()} 
          >
            <h2 className="text-xl font-semibold mb-4">–ü—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è</h2>
            <p className="mb-6">–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—é –ø–æ–¥—ñ—é? –¶—é –¥—ñ—é –Ω–µ–º–æ–∂–ª–∏–≤–æ —Å–∫–∞—Å—É–≤–∞—Ç–∏.</p>
            <div className="flex justify-end space-x-4">
              <button
                onClick={closeDeleteModal}
                className="px-4 py-2 rounded cursor-pointer bg-gray-300 hover:bg-gray-400 transition"
              >
                C–∫–∞—Å—É–≤–∞—Ç–∏
              </button>
              <button
                onClick={confirmDelete}
                className="px-4 py-2 rounded cursor-pointer bg-red-600 text-white hover:bg-red-700 transition"
              >
                –í–∏–¥–∞–ª–∏—Ç–∏
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default EditEventPage;
